@page "/books/details"
@inject BlazorBooksApp.BooksService BooksService
@using BlazorBooksApp
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Book</h4>
    <hr />
    @if (book is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@book.Title</dd>
            <dt class="col-sm-2">ISBN</dt>
            <dd class="col-sm-10">@book.ISBN</dd>
            <dt class="col-sm-2">BookAuthors</dt>
            <dd class="col-sm-10">@book.Author</dd>
            <dt class="col-sm-2">Download</dt>
            @if (book.S3Link != null)
            {
                <dd class="col-sm-10">
                    <a href="@book.DownloadLink">@book.S3Link.Key</a>
                </dd>
            }
        </dl>
        <div>
            <a href="@($"/books/edit?id={book.Id}")">Edit</a> |
            <a href="@($"/books")">Back to List</a>
        </div>

    }
</div>

@code {
    Book? book;

    [SupplyParameterFromQuery]
    public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        book = await BooksService.GetBook(Id);

        if (book is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
